Stephen New

1. How I tested
I tried my best to unit test every file. Here are the files I tested with:
- firewall_test.py
- ip_address_manager_test.py
- ip_address_test.py
- port_manager_test.py
- simple_manager_test.py

For firewall_test.py, look to ./test_files for the cvs files tested with

2. For each of the four properties, I created a manager for each. All of the managers
inherit from the abstract class PropertyManager. Both direction and protocol managers
use the SimpleManager class since they do not support range values for input. That is
why there are PortManager and IpAddressManager classes. See below for summary of 
managers:

self.rule_managers = {
    DIRECTION: SimpleManager(),
    PROTOCOL: SimpleManager(),
    PORT: PortManager(),
    IP_ADDRESS: IpAddressManager()
}

The purpose of a manager is to store the rules that correspond to a particular
property value for example, if rule 1 and 3 have the 'outbound' property, then the
manager for direction will store {'outbound' : {1, 3}}.

To  deal with IP addresses and enumerating all possible IP addresses, a IpAddress class
was created. 

To determine if a given packet is accepted, for each of the four given properties,
we take the intersection of all the rules each property satisfies. The resultant set
then contains all the rules that the given packet passes. If empty, then no rules exist
to allow the to pass.

3. For the policy team!

4. How to run
Run 
python3 main.py